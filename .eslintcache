[{"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\index.tsx":"1","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\App.tsx":"2","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page3\\Page3.tsx":"3","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page3\\page3Reducer.tsx":"4","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page2\\InputComponent2.tsx":"5","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\reportWebVitals.ts":"6","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page3\\InputComponent3.tsx":"7","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\TopMenu.tsx":"8","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page1\\Page1.tsx":"9","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\utils\\SiteContext.tsx":"10","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page2\\Page2.tsx":"11","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\component\\Header.tsx":"12","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\api.ts":"13","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page2\\page2Reducer.tsx":"14","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page1\\InputComponent.tsx":"15","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\component\\SearchResultList.tsx":"16"},{"size":694,"mtime":1615124845686,"results":"17","hashOfConfig":"18"},{"size":1223,"mtime":1615125557139,"results":"19","hashOfConfig":"18"},{"size":2674,"mtime":1614954201223,"results":"20","hashOfConfig":"18"},{"size":947,"mtime":1610760183006,"results":"21","hashOfConfig":"18"},{"size":2461,"mtime":1610155058336,"results":"22","hashOfConfig":"18"},{"size":425,"mtime":1609883710000,"results":"23","hashOfConfig":"18"},{"size":3999,"mtime":1610810484206,"results":"24","hashOfConfig":"18"},{"size":2597,"mtime":1610760447700,"results":"25","hashOfConfig":"18"},{"size":2604,"mtime":1610155058335,"results":"26","hashOfConfig":"18"},{"size":1145,"mtime":1615126327870,"results":"27","hashOfConfig":"18"},{"size":2415,"mtime":1614954261092,"results":"28","hashOfConfig":"18"},{"size":382,"mtime":1615125409849,"results":"29","hashOfConfig":"18"},{"size":1158,"mtime":1610760183006,"results":"30","hashOfConfig":"18"},{"size":947,"mtime":1610155058338,"results":"31","hashOfConfig":"18"},{"size":2410,"mtime":1610155058333,"results":"32","hashOfConfig":"18"},{"size":234,"mtime":1609883710000,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17o8xbs",{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\index.tsx",[],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\App.tsx",["76","77","78","79"],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page3\\Page3.tsx",["80","81","82","83"],"import { Link } from \"react-router-dom\";\r\nimport React , {useReducer, useContext, useEffect} from 'react';\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Page3ContextProvider, Page3Context } from \"./page3Reducer\"\r\nimport { InputComponent1, InputComponent2 } from \"./InputComponent3\";\r\nimport { SiteContext } from '../../utils/SiteContext';\r\nimport { postPage3 } from \"../../api\";\r\n\r\n/**\r\n * ・フォーム全体の入力値(inputData)は、Page3が保持する。\r\n * ・useContextフックを使うことで、propsにコールバックを引き渡す必要はない。\r\n * ・ページとコンポーネントの階層が深くなる場合でも複雑化しない。\r\n */\r\nexport function Page3() {\r\n  return (\r\n    <>\r\n      <h3>Page2</h3>\r\n      <ul>\r\n        <li><Link to=\"/\">TopMenu</Link></li>\r\n      </ul>\r\n      <Page3ContextProvider>\r\n        <Page3Form />\r\n      </Page3ContextProvider>\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * contextを利用するためにはコンポーネントをProvider内部に配置する必要があるため、\r\n * Formを切り出してContextを利用する\r\n */\r\nfunction Page3Form() {\r\n  const { state, dispatch } = useContext(Page3Context);\r\n  const { dispatch: siteDispatch } = useContext(SiteContext);\r\n\r\n  useEffect( () => {\r\n    siteDispatch({ type: \"CHANGE_PAGE_NAME\", strValue: \"Page3\", numValue: 0 });\r\n  },[]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    console.log(state);\r\n    // alert(JSON.stringify(state, null, \"\\t\"));\r\n    siteDispatch({ type: \"CHANGE_USER\", strValue: \"userPage3\", numValue: 333 });\r\n\r\n    // // バックエンドへ送信\r\n    // const response = await postPage3(state);\r\n    // if (response.status !== 200) {\r\n    //   console.log(response.statusText);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <InputComponent1 id=\"id1\" title=\"title1\" message=\"message1\" />\r\n        <InputComponent1 id=\"id2\" title=\"title2\" message=\"message2\" />\r\n        <InputComponent2 id=\"id3\" title=\"title3\" message=\"message3\" />\r\n        <InputComponent2 id=\"id4\" title=\"title4\" message=\"message4\" />\r\n        <p>\r\n          <Button type=\"submit\"  variant=\"contained\"  color=\"primary\">登録</Button>\r\n        </p>\r\n      </form>\r\n      <br />\r\n * ・フォーム全体の入力値(inputData)は、Page3が保持する。<br />\r\n * ・useContextフックを使うことで、propsにコールバックを引き渡す必要はない。<br />\r\n * ・ページとコンポーネントの階層が深くなる場合でも複雑化しない。<br />\r\n * ・Material-UIコンポーネントのサンプル<br />\r\n    </>\r\n  )\r\n}",["84","85"],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page3\\page3Reducer.tsx",["86"],"import React , {useReducer, useContext} from 'react';\r\n\r\nexport type Action ={ type: 'CHANGE_VALUE' | 'CLEAR_VALUE', name: string, value: string }\r\nexport type InputDataType = {[index:string]: string};\r\n\r\nconst initialState: InputDataType = {}\r\n\r\nfunction reducer(state:InputDataType,  action: Action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_VALUE':\r\n      return {\r\n        ...state,\r\n        [action.name]: action.value\r\n      };\r\n      case 'CLEAR_VALUE':\r\n        return {\r\n          ...state,\r\n          [action.name]: \"\"\r\n        };\r\n    default : \r\n      return state\r\n  }\r\n}\r\n\r\nexport const Page3Context = React.createContext({} as {\r\n  state: InputDataType\r\n  dispatch: React.Dispatch<Action>\r\n});\r\n\r\nexport const Page3ContextProvider = (props: any) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  return <Page3Context.Provider value={{state, dispatch}}>\r\n    {props.children}\r\n  </Page3Context.Provider>\r\n}\r\n","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page2\\InputComponent2.tsx",["87","88","89"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { Page2Context } from './page2Reducer';\r\n\r\nexport type InputPropsType = {\r\n  id:string, \r\n  title: string, \r\n  message:string,\r\n}\r\n\r\nexport function InputComponent1(props: InputPropsType){\r\n    const [checked, setChecked] = useState(true);\r\n    const { state, dispatch } = useContext(Page2Context);\r\n\r\n    const message = checked?(''):(<> {props.message}</>);\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n      setChecked(e.target.value === \"1\");\r\n      dispatch ({ type: \"CHANGE_VALUE\", name: e.target.name, value: e.target.value });\r\n    }\r\n\r\n    return (\r\n      <div style={{padding:\"10px\"}}> \r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleChange } />はい</label> <br />\r\n            <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleChange } />いいえ</label>\r\n            { message }           \r\n        </div>   \r\n      </div>\r\n    ); \r\n}\r\n\r\n/**\r\n * \r\n * @param props \r\n */\r\nexport function InputComponent2(props: InputPropsType){\r\n  const [checked, setChecked] = useState(true);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const { state, dispatch } = useContext(Page2Context);\r\n\r\n  const handleRadioChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n    setChecked(e.target.value === \"1\");\r\n    dispatch ({ type: \"CHANGE_VALUE\", name: e.target.name, value: e.target.value });\r\n    if(e.target.value === \"1\"){ \r\n      setInputText(\"\");\r\n      dispatch ({ type: \"CLEAR_VALUE\",  name: `text_${props.id}`, value: \"\" });\r\n    }    \r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n    setInputText(e.target.value);\r\n    dispatch ({ type: \"CHANGE_VALUE\", name: e.target.name, value: e.target.value });\r\n  }\r\n\r\n  const message = checked?(''):(<> <input type=\"text\" name={`text_${props.id}`} onChange={handleInputChange} value={inputText} ></input> </>);\r\n\r\n  return (\r\n    <div style={{padding:\"10px\"}}> \r\n      <h3>{props.title}</h3>\r\n      <div>\r\n          <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleRadioChange } />はい</label> <br />\r\n          <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleRadioChange } />いいえ</label>\r\n          { message }           \r\n      </div>   \r\n    </div>\r\n  ); \r\n}","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\reportWebVitals.ts",[],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page3\\InputComponent3.tsx",["90","91","92"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { FormControl, RadioGroup, Radio,FormControlLabel, FormHelperText, FormLabel, Input, Box } from \"@material-ui/core\";\r\nimport { Page3Context } from './page3Reducer';\r\n\r\nexport type InputPropsType = {\r\n  id:string, \r\n  title: string, \r\n  message:string,\r\n}\r\n\r\nexport function InputComponent1(props: InputPropsType){\r\n    const [checked, setChecked] = useState(true);\r\n    const { state, dispatch } = useContext(Page3Context);\r\n\r\n    const message = checked?(''):(<> {props.message}</>);\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n      setChecked(e.target.value === \"1\");\r\n      dispatch ({ type: \"CHANGE_VALUE\", name: e.target.name, value: e.target.value });\r\n    }\r\n\r\n    return (\r\n      <Box component=\"div\">\r\n        <FormControl component=\"fieldset\" >\r\n          <FormLabel component=\"legend\">{props.title}</FormLabel>\r\n          {/* <div>\r\n              <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleChange } />はい</label> <br />\r\n              <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleChange } />いいえ</label>\r\n              { message }           \r\n          </div>    */}\r\n          <RadioGroup onChange={ handleChange } name={`select_${props.id}`}>　\r\n            <FormControlLabel value=\"1\" control={<Radio />} label=\"はい\" />\r\n            <FormControlLabel value=\"0\" control={<Radio />} label=\"いいえ\" />\r\n            <FormHelperText >{message}</FormHelperText>\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </Box>\r\n    ); \r\n}\r\n\r\n/**\r\n * \r\n * @param props \r\n */\r\nexport function InputComponent2(props: InputPropsType){\r\n  const [checked, setChecked] = useState(true);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const { state, dispatch } = useContext(Page3Context);\r\n\r\n  const handleRadioChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n    setChecked(e.target.value === \"1\");\r\n    dispatch ({ type: \"CHANGE_VALUE\", name: e.target.name, value: e.target.value });\r\n    if(e.target.value === \"1\"){ \r\n      setInputText(\"\");\r\n      dispatch ({ type: \"CLEAR_VALUE\",  name: `text_${props.id}`, value: \"\" });\r\n    }    \r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n    setInputText(e.target.value);\r\n    dispatch ({ type: \"CHANGE_VALUE\", name: e.target.name, value: e.target.value });\r\n  }\r\n\r\n  // const message = checked?(''):(<> <input type=\"text\" name={`text_${props.id}`} onChange={handleInputChange} value={inputText} ></input> </>);\r\n  const display = checked?('none'):('block');\r\n\r\n  return (\r\n    // <div style={{padding:\"10px\"}}> \r\n    //   <h3>{props.title}</h3>\r\n    //   <div>\r\n    //       <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleRadioChange } />はい</label> <br />\r\n    //       <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleRadioChange } />いいえ</label>\r\n    //       { message }           \r\n    //   </div>   \r\n    // </div>\r\n    <Box component=\"div\">\r\n      <FormControl component=\"fieldset\" >\r\n        <FormLabel component=\"legend\">{props.title}</FormLabel>\r\n        {/* <div>\r\n            <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleChange } />はい</label> <br />\r\n            <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleChange } />いいえ</label>\r\n            { message }           \r\n        </div>    */}\r\n        <RadioGroup onChange={ handleRadioChange } name={`select_${props.id}`}>　\r\n          <FormControlLabel value=\"1\" control={<Radio />} label=\"はい\" />\r\n          <FormControlLabel value=\"0\" control={<Radio />} label=\"いいえ\" />\r\n        </RadioGroup>\r\n        <Box component=\"span\" display={display}><Input name={`text_${props.id}`} onChange={handleInputChange} value={inputText} /></Box>  \r\n      </FormControl>\r\n    </Box>\r\n  ); \r\n}","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\TopMenu.tsx",["93"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { getSearchResults } from \"../api\";\r\nimport { SearchResultList } from \"../component/SearchResultList\"\r\n\r\n\r\nexport function TopMenu(){\r\n    const [inputVal, setInputVal] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState<any[]>([]);\r\n  \r\n    const handleChange = (e: any) => {\r\n      setInputVal( e.target.value);\r\n    }\r\n  \r\n    const handleClick = async (e: any) => {\r\n      const jsonResult = await getSearchResults({key: inputVal});\r\n      setSearchResult(jsonResult);\r\n    }\r\n  \r\n    return (\r\n      <> \r\n        <h3>TopMenu</h3>\r\n\r\n        <div style={ {margin:\"1vw\", padding:\"1vw\", backgroundColor:\"#DDE\"} }>\r\n          <div style={ {border:\"1px solid #AAA\"} } >\r\n            <p>検索サンプル バックエンドからjsonでデータを受け取り表示する。バックエンド側では、テキストボックスの値をlikeで検索した結果を返す<br />\r\n            現時点ではダミーデータに対して検索結果を返す実装としている（1や2を入力して検索）</p>       \r\n            <input value={inputVal} onChange={handleChange} onKeyPress={(e)=>{ if(e.key === \"Enter\") {e.preventDefault();handleClick(e);}}} />\r\n            <button onClick={handleClick}>検索</button>\r\n            <SearchResultList results={searchResult} />\r\n          </div>\r\n          <div>        \r\n            <p><Link to=\"/Page1\"><button>Page1</button></Link> サンプル１：関数コンポーネント＋Hookでフォーム入力データをPostするサンプル</p>\r\n            <p><Link to=\"/Page2\"><button>Page2</button></Link> サンプル２：上記に加え、useContextでデータ保持してPost(Reduxは未使用)</p>\r\n            <p><Link to=\"/Page3\"><button>Page3</button></Link> サンプル３：２をMaterial-UIで</p>\r\n          </div>\r\n          <p>\r\n            ■実装済み<br />\r\n            ・ラジオボタン選択による表示切り替え <br />\r\n            ・入力値をstateもしくはcontextへの更新 <br />\r\n            ・バックエンドへのPOST(axios利用) <br />\r\n            ・sequelize(ORマッパー)を利用したデータInsert処理<br />\r\n            <br />\r\n            ■未実装<br />\r\n            ・URLにidをつけて表示した場合、その値で画面を表示し、更新を行う [/Page1/:id] <br />\r\n            ・入力チェック <br />\r\n            ・POST前の確認ダイアログ <br />\r\n          </p>\r\n        </div>  \r\n      </>   \r\n    )\r\n  }\r\n  \r\n  ","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page1\\Page1.tsx",["94","95"],"import { debug } from 'console';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { InputComponent1, InputComponent2 } from \"./InputComponent\";\r\nimport { postPage1 } from \"../../api\";\r\n\r\n\r\n/**\r\n * ・フォーム全体の入力値(inputData)は、Page1が保持する\r\n * ・入力コンポーネントには、変更用コールバック(handleChange)を渡し、値変更時にコールバックして書き換える。\r\n * ・ページとコンポーネントの階層が深くない場合これでも良いが、深くなるとpropsで子、孫と順次コールバック関数を引き渡すことになり\r\n * 　コンポーネントの独立性が失われてしまう\r\n */\r\nexport function Page1(){\r\n  const [inputData, setInputData] = useState({});\r\n  const handleChange = (e: { [index:string]: string }) => {\r\n    // stateを入力データとマージする\r\n    setInputData({\r\n      ...inputData,\r\n      ...e,\r\n    });\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    console.log(inputData);\r\n    alert(JSON.stringify(inputData, null , \"\\t\"));\r\n\r\n    // バックエンドへ送信\r\n    const response = await postPage1(inputData);\r\n    if( response.status !== 200 ){\r\n      console.log(response.statusText);\r\n    }\r\n  }\r\n    return (\r\n      <> \r\n        <h3>Page1</h3>\r\n        <ul>\r\n            <li><Link to=\"/\">TopMenu</Link></li>\r\n        </ul>\r\n        <form onSubmit={ handleSubmit }>\r\n          <InputComponent1 id=\"id1\" title=\"title1\" message=\"message1\" handleChange={handleChange} />\r\n          <InputComponent1 id=\"id2\" title=\"title2\" message=\"message2\" handleChange={handleChange}  />\r\n          <InputComponent2 id=\"id3\" title=\"title3\" message=\"message3\" handleChange={handleChange}  />        \r\n          <InputComponent2 id=\"id4\" title=\"title4\" message=\"message4\" handleChange={handleChange}  />  \r\n          <p>\r\n            <input type=\"submit\" value=\"登録\" />\r\n          </p>                  \r\n        </form>\r\n        <br />\r\n * ・フォーム全体の入力値(inputData)は、Page1が保持する<br />\r\n * ・入力コンポーネントには、変更用コールバック(handleChange)を渡し、値変更時にコールバックして書き換える。<br />\r\n * ・ページとコンポーネントの階層が深くない場合これでも良いが、深くなるとpropsで子、孫と順次コールバック関数を引き渡すことになり<br />\r\n * 　コンポーネントの独立性が失われてしまう<br />\r\n      </>\r\n    );\r\n}","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\utils\\SiteContext.tsx",["96"],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page2\\Page2.tsx",["97","98"],"import { Link } from \"react-router-dom\";\r\nimport React , {useEffect, useContext} from 'react';\r\nimport { Page2ContextProvider, Page2Context } from \"./page2Reducer\"\r\nimport { InputComponent1, InputComponent2 } from \"./InputComponent2\";\r\nimport { SiteContext } from '../../utils/SiteContext';\r\nimport { postPage2 } from \"../../api\";\r\n\r\n/**\r\n * ・フォーム全体の入力値(inputData)は、Page1が保持する。\r\n * ・useContextフックを使うことで、propsにコールバックを引き渡す必要はない。\r\n * ・ページとコンポーネントの階層が深くなる場合でも複雑化しない。\r\n */\r\nexport function Page2() {\r\n  return (\r\n    <>\r\n      <h3>Page2</h3>\r\n      <ul>\r\n        <li><Link to=\"/\">TopMenu</Link></li>\r\n      </ul>\r\n      <Page2ContextProvider>\r\n        <Page2Form />\r\n      </Page2ContextProvider>\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * contextを利用するためにはコンポーネントをProvider内部に配置する必要があるため、\r\n * Formを切り出してContextを利用する\r\n */\r\nfunction Page2Form() {\r\n  const { state, dispatch } = useContext(Page2Context);\r\n  const { dispatch: siteDispatch } = useContext(SiteContext);\r\n  useEffect( () => {\r\n    siteDispatch({ type: \"CHANGE_PAGE_NAME\", strValue: \"Page2\", numValue: 0 });\r\n  },[]);\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    console.log(state);\r\n    alert(JSON.stringify(state, null, \"\\t\"));\r\n\r\n    // バックエンドへ送信\r\n    const response = await postPage2(state);\r\n    if (response.status !== 200) {\r\n      console.log(response.statusText);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <InputComponent1 id=\"id1\" title=\"title1\" message=\"message1\" />\r\n        <InputComponent1 id=\"id2\" title=\"title2\" message=\"message2\" />\r\n        <InputComponent2 id=\"id3\" title=\"title3\" message=\"message3\" />\r\n        <InputComponent2 id=\"id4\" title=\"title4\" message=\"message4\" />\r\n        <p>\r\n          <input type=\"submit\" value=\"登録\" />\r\n        </p>\r\n      </form>\r\n      <br />\r\n * ・フォーム全体の入力値(inputData)は、Page1が保持する。<br />\r\n * ・useContextフックを使うことで、propsにコールバックを引き渡す必要はない。<br />\r\n * ・ページとコンポーネントの階層が深くなる場合でも複雑化しない。<br />\r\n    </>\r\n  )\r\n}","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\component\\Header.tsx",["99","100","101","102"],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\api.ts",[],"C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page2\\page2Reducer.tsx",["103"],"import React , {useReducer, useContext} from 'react';\r\n\r\nexport type Action ={ type: 'CHANGE_VALUE' | 'CLEAR_VALUE', name: string, value: string }\r\nexport type InputDataType = {[index:string]: string};\r\n\r\nconst initialState: InputDataType = {}\r\n\r\nfunction reducer(state:InputDataType,  action: Action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_VALUE':\r\n      return {\r\n        ...state,\r\n        [action.name]: action.value\r\n      };\r\n      case 'CLEAR_VALUE':\r\n        return {\r\n          ...state,\r\n          [action.name]: \"\"\r\n        };\r\n    default : \r\n      return state\r\n  }\r\n}\r\n\r\nexport const Page2Context = React.createContext({} as {\r\n  state: InputDataType\r\n  dispatch: React.Dispatch<Action>\r\n});\r\n\r\nexport const Page2ContextProvider = (props: any) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  return <Page2Context.Provider value={{state, dispatch}}>\r\n    {props.children}\r\n  </Page2Context.Provider>\r\n}\r\n","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\pages\\Page1\\InputComponent.tsx",["104","105"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport type InputPropsType = {\r\n  id:string, \r\n  title: string, \r\n  message:string,\r\n  // handleChange: (e: {name:string, value: string, e?: React.ChangeEvent<HTMLInputElement>}) => void\r\n  handleChange: (e: { [index:string]: string }) => void\r\n}\r\n\r\nexport function InputComponent1(props: InputPropsType){\r\n    const [checked, setChecked] = useState(true);\r\n    const message = checked?(''):(<> {props.message}</>);\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n      setChecked(e.target.value === \"1\");\r\n      props.handleChange({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    return (\r\n      <div style={{padding:\"10px\"}}> \r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleChange } />はい</label> <br />\r\n            <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleChange } />いいえ</label>\r\n            { message }           \r\n        </div>   \r\n      </div>\r\n    ); \r\n}\r\n\r\nexport function InputComponent2(props: InputPropsType){\r\n  const [checked, setChecked] = useState(true);\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  const handleRadioChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n    setChecked(e.target.value === \"1\");\r\n    if(e.target.value === \"1\"){ \r\n      setInputText(\"\");\r\n      props.handleChange({ [e.target.name]: e.target.value, [`text_${props.id}`]: \"\" });\r\n    } else{\r\n      props.handleChange({ [e.target.name]: e.target.value });\r\n    }    \r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> ) =>{\r\n    setInputText(e.target.value); \r\n    props.handleChange({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  const message = checked?(''):(<> <input type=\"text\" name={`text_${props.id}`} onChange={handleInputChange} value={inputText} ></input> </>);\r\n\r\n  return (\r\n    <div style={{padding:\"10px\"}}> \r\n      <h3>{props.title}</h3>\r\n      <div>\r\n          <label><input type=\"radio\" name={`select_${props.id}`} value=\"1\" onChange={ handleRadioChange } />はい</label> <br />\r\n          <label><input type=\"radio\" name={`select_${props.id}`} value=\"0\" onChange={ handleRadioChange } />いいえ</label>\r\n          { message }           \r\n      </div>   \r\n    </div>\r\n  ); \r\n}","C:\\Users\\t_nii\\Documents\\git\\frontend\\proto-app\\react-ts-proto-client\\src\\component\\SearchResultList.tsx",[],{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":27},{"ruleId":"106","severity":1,"message":"110","line":1,"column":41,"nodeType":"108","messageId":"109","endLine":1,"endColumn":50},{"ruleId":"106","severity":1,"message":"111","line":8,"column":10,"nodeType":"108","messageId":"109","endLine":8,"endColumn":25},{"ruleId":"106","severity":1,"message":"112","line":8,"column":41,"nodeType":"108","messageId":"109","endLine":8,"endColumn":60},{"ruleId":"106","severity":1,"message":"107","line":2,"column":17,"nodeType":"108","messageId":"109","endLine":2,"endColumn":27},{"ruleId":"106","severity":1,"message":"113","line":7,"column":10,"nodeType":"108","messageId":"109","endLine":7,"endColumn":19},{"ruleId":"106","severity":1,"message":"114","line":33,"column":18,"nodeType":"108","messageId":"109","endLine":33,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":38,"column":5,"nodeType":"117","endLine":38,"endColumn":7,"suggestions":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"106","severity":1,"message":"123","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":39},{"ruleId":"106","severity":1,"message":"110","line":1,"column":27,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"124","line":12,"column":13,"nodeType":"108","messageId":"109","endLine":12,"endColumn":18},{"ruleId":"106","severity":1,"message":"124","line":40,"column":11,"nodeType":"108","messageId":"109","endLine":40,"endColumn":16},{"ruleId":"106","severity":1,"message":"110","line":1,"column":27,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"124","line":13,"column":13,"nodeType":"108","messageId":"109","endLine":13,"endColumn":18},{"ruleId":"106","severity":1,"message":"124","line":48,"column":11,"nodeType":"108","messageId":"109","endLine":48,"endColumn":16},{"ruleId":"106","severity":1,"message":"110","line":1,"column":27,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"125","line":1,"column":10,"nodeType":"108","messageId":"109","endLine":1,"endColumn":15},{"ruleId":"106","severity":1,"message":"110","line":2,"column":27,"nodeType":"108","messageId":"109","endLine":2,"endColumn":36},{"ruleId":"106","severity":1,"message":"123","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":39},{"ruleId":"106","severity":1,"message":"114","line":32,"column":18,"nodeType":"108","messageId":"109","endLine":32,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":36,"column":5,"nodeType":"117","endLine":36,"endColumn":7,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":27},{"ruleId":"106","severity":1,"message":"123","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":39},{"ruleId":"106","severity":1,"message":"110","line":1,"column":41,"nodeType":"108","messageId":"109","endLine":1,"endColumn":50},{"ruleId":"106","severity":1,"message":"127","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":21},{"ruleId":"106","severity":1,"message":"123","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":39},{"ruleId":"106","severity":1,"message":"110","line":1,"column":27,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"128","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ContextProvider' is defined but never used.","'SiteContextDataType' is defined but never used.","'postPage3' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'siteDispatch'. Either include it or remove the dependency array.","ArrayExpression",["129"],"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"'useContext' is defined but never used.","'state' is assigned a value but never used.","'debug' is defined but never used.",["132"],"'SiteContext' is defined but never used.","'useParams' is defined but never used.",{"desc":"133","fix":"134"},"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"135"},"Update the dependencies array to be: [siteDispatch]",{"range":"136","text":"137"},{"range":"138","text":"137"},[1111,1113],"[siteDispatch]",[1052,1054]]